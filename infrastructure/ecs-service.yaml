---

AWSTemplateFormatVersion: '2010-09-09'


Description: ECS Service best practice template


Outputs:
  EcsService:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcsService
    Value:
      Ref: EcsService


Parameters:
  ContainerTag:
    Description: 'Tag of the container image coming from ECR'
    Type: String


Resources:
  EcsService:
    DependsOn: TaskDefinition
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        # Rolling update
        Type: ECS
      DesiredCount: 1
      PlacementStrategies:
      - Type: random
      ServiceName:
        Fn::Sub: ${AWS::StackName}
      LoadBalancers:
        - ContainerName:
            Fn::Sub: ${AWS::StackName}
          ContainerPort: 80
          TargetGroupArn:
            Ref: TargetGroup
      Tags:
      - Key: project
        Value: deploy-laravel-app-to-ecs
      TaskDefinition:
        Ref: TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name:
          Fn::Sub: ${AWS::StackName}
        Image:
          Fn::Sub:
          - '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repo}:${ContainerTag}'
          - repo:
              Fn::ImportValue: ecr-RepositoryName
        Cpu: 256
        Memory: 512
        PortMappings:
          - ContainerPort: 80
        Environment:
        - Name: AWS_ACCESS_KEY
          Value:
            Ref: IamUserAccessKey
        - Name: AWS_EC2_TAGS_RUNNER
          Value: 'Project,php-app'
        Secrets:
        - Name: AWS_SECRET_KEY
          ValueFrom:
            Ref: IamUserAccesKeySecret
        Privileged: True
        User: "root"
      ExecutionRoleArn:
        Fn::GetAtt:
        - TaskRole
        - Arn

# Applicaiton Autoscaling for ECS service tasks
  EcsTaskScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      RoleARN:
        Fn::ImportValue: ecs-cluster-EcsServiceAutoScalingRoleArn
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId:
        # Resource ID format service/<cluster-name>/<service-name>
        Fn::Join:
        - '/'
        - - "service"
          - Fn::ImportValue: ecs-cluster-EcsCluster
          - Fn::Select:
            - '2'
            - Fn::Split:
               - '/'
               - Ref: EcsService
    
  EcsTaskScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 
        Fn::Sub: ${AWS::StackName}-EcsTaskScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: EcsTaskScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0     # achor value - anything below this results in scaling down and anything above this results in scaling out
        ScaleInCooldown: 30   # seconds to wait before scaling down each task
        ScaleOutCooldown: 15  # seconds to wait while scaling up each task
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # Target group specific to service
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: base-vpc-VPC

  # Create a rule on the load balancer for routing traffic to the target group
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '/'
      ListenerArn:
        Fn::ImportValue: ecs-cluster-EcsClusterListenerArn
      Priority: 1

  # IAM role for the service task defination
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: GetGitlabToken
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            - secretsmanager:ListSecretVersionIds
            - secretsmanager:ListSecrets
            Resource:
            - Ref: IamUserAccesKeySecret
      - PolicyName: ecr-permissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:DescribeImages
            - ecr:DescribeImageScanFindings
            - ecr:DescribeRepositories
            - ecr:GetAuthorizationToken
            - ecr:GetDownloadUrlForLayer
            - ecr:GetLifecyclePolicy
            - ecr:GetLifecyclePolicyPreview
            - ecr:GetRepositoryPolicy
            - ecr:ListImages
            - ecr:ListTagsForResource
            Effect: Allow
            Resource: '*'
      RoleName:
        Fn::Sub: ${AWS::StackName}-TaskRole

...
